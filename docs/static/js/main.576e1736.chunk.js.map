{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","key","GigExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEPC,mBAAS,IAFF,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB7C,OAGE,0BAAMC,SAda,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,OAUd,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAxBoB,SAACP,GAGzBF,EAAeE,EAAEQ,OAAOF,Y,uBCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAUH,GAF5C,+DAIFI,MAAOF,GAJL,cAIfG,EAJe,gBAMAA,EAAKC,OANL,uBAMdC,EANc,EAMdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAC3B,MAAM,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZjB,kBAgBdM,GAhBc,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEtC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCFEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEhBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA0B1C,OAnBAC,qBAAW,WAETxB,EAASC,GACJwB,MAAM,SAAAC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAUjB,CAACpB,IAEIqB,EDc2BK,CAAc1B,GAAlCa,EAtCyB,EAsC/BN,KAAca,EAtCiB,EAsCjBA,QAItB,OAFAO,QAAQC,IAAIR,GAGV,oCACA,wBAAIJ,UAAU,qCAAqChB,GAEjDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAqBXH,EAAOJ,KAAK,SAAAC,GAAG,OACb,kBAAC,EAAD,eACEmB,IAAKnB,EAAIC,IACJD,UEnCFoB,EAtCM,WAAK,MAGY5C,mBAAS,CAAC,aAHtB,mBAGjBQ,EAHiB,KAGLT,EAHK,KAexB,OACE,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEIS,EAAWe,KAAK,SAAET,GAAF,OAEd,kBAAC,EAAD,CACE6B,IAAK7B,EACLA,SAAUA,U,MC1BtB+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.576e1736.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) =>{\r\n  \r\n  const [ inputValue, setInputValue ] = useState('');  \r\n\r\n  const handleInputChange = (e) =>{\r\n    // console.log(e.target.value);\r\n\r\n    setInputValue( e.target.value );\r\n  }\r\n\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2 ){\r\n      setCategories( categories => [ inputValue, ...categories ] );\r\n      setInputValue('');\r\n    }\r\n\r\n  }\r\n\r\n  //  NO PUEDES CAMBIAR UN VALOR DE FORMA DIRECTA SIEMPRE TIENES QUE UTILIZAR EL onChange() PORQUE SINO MUESTRA EL INPUT CON EL VALUE PERO NO TE PERMITE CAMBIAR ESTA COMO BLOQUEADO\r\n  return (\r\n\r\n    // <h1>{inputValue}</h1>\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>  \r\n\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async( category ) =>{\r\n  //  EL encodeURI SOLO BORRA ESPACIOS EN BLANCOS QUE SE ESCRIBIERON Y SE MANDARON DE ESA FORMA\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=fxHF3ZqRhMfUVR9crvf6zrTdpoGUtdFX`;\r\n\r\n  const resp = await fetch( url );\r\n\r\n  const {data} = await resp.json();\r\n\r\n  const gifs = data.map( img =>{\r\n    return{\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs;\r\n  \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  // console.log(id,title,url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={ url } alt={ title } />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n  \r\n  // const [count, setCount] = useState(0); \r\n  // const [images, setImages] = useState([]) \r\n  //  2\r\n  // useEffect( () =>{\r\n  //   getGifs( category )\r\n  //       .then( imgs =>{\r\n  //         setImages( imgs )\r\n  //       })\r\n  //       //  ESTA category ES SOLO PARA DECIR A useEffect QUE TIENE QUE CAMBIAR PARA QUE SE EJECUTE LA FUNCION QUE ESTA DENTRO   \r\n  // }, [ category ])\r\n  //  1\r\n  // const getGifs = async() =>{\r\n\r\n  //   const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=fxHF3ZqRhMfUVR9crvf6zrTdpoGUtdFX`;\r\n\r\n  //   const resp = await fetch( url );\r\n\r\n  //   const {data} = await resp.json();\r\n\r\n  //   const gifs = data.map( img =>{\r\n  //     return{\r\n  //       id: img.id,\r\n  //       title: img.title,\r\n  //       url: img.images?.downsized_medium.url\r\n  //     }\r\n  //   })\r\n\r\n  //   console.log(gifs);\r\n\r\n  //   setImages( gifs );\r\n\r\n  // }\r\n  //  1\r\n  // getGifs();\r\n\r\n  //  3\r\n  const { data: images, loading } = useFetchGifs( category );\r\n\r\n  console.log(loading);\r\n\r\n  return (\r\n    <>\r\n    <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n    { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n    <div className=\"card-grid\">\r\n      {/* <h2>{ count }</h2> */}\r\n      {/* <button onClick={ () => {setCount( count + 1 )} }>Send</button> */}\r\n      \r\n      {/* <ol>\r\n        {\r\n          images.map( ({ id, title }) => (\r\n            <li key={ id }>{ title }</li>\r\n          ))\r\n        }\r\n      </ol> */}\r\n      {/* {\r\n        images.map( img => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            { ...img } \r\n          />\r\n        ))\r\n      } */}\r\n\r\n      {\r\n        images.map( img => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            { ...img } \r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n  \r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( () =>{\r\n\r\n    getGifs( category )\r\n        .then( imgs =>{\r\n          \r\n          setState({\r\n            data: imgs,\r\n            loading: false\r\n          })\r\n          // setTimeout( ()=>{\r\n          //   setState({\r\n          //     data: imgs,\r\n          //     loading: false\r\n          //   })\r\n          // },3000) \r\n        })\r\n\r\n  },[category]);\r\n\r\n  return state;\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GigExpertApp = () =>{\r\n  \r\n  // const categorias = ['one puch', 'Samurai X', 'Iroman'];\r\n  const [categories, setCategories] = useState(['One Puch']);\r\n  \r\n  // const handleAdd = () =>{\r\n  //   // setCategories( cats =>[ ...cats, 'Thor' ])\r\n\r\n  //   setCategories([\r\n  //     'Thor',\r\n  //     ...categories\r\n  //   ]);\r\n  // }\r\n\r\n  \r\n  return(\r\n    <>\r\n    <h2>GigExpertApp</h2>\r\n    <AddCategory setCategories={setCategories} />\r\n    <hr />\r\n\r\n    {/* <button onClick={ handleAdd }>Agregar</button>   */}\r\n\r\n    <ol>\r\n      {\r\n        categories.map( ( category ) => (\r\n          // return <li key={ category }>{category} </li>\r\n          <GifGrid \r\n            key={category}\r\n            category={category} \r\n          />\r\n        ))\r\n      }\r\n    </ol>  \r\n    </>\r\n  ) \r\n};\r\n\r\nexport default GigExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GigExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GigExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}